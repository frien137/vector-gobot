/*
 * Generated by gdbus-codegen 2.48.2. DO NOT EDIT.
 *
 * The license of this code is the same as for the source it was derived from.
 */

#ifndef __CONNMANBUS_H__
#define __CONNMANBUS_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for net.connman.Manager */

#define CONN_MAN_BUS_TYPE_MANAGER (conn_man_bus_manager_get_type ())
#define CONN_MAN_BUS_MANAGER(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), CONN_MAN_BUS_TYPE_MANAGER, ConnManBusManager))
#define CONN_MAN_BUS_IS_MANAGER(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), CONN_MAN_BUS_TYPE_MANAGER))
#define CONN_MAN_BUS_MANAGER_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), CONN_MAN_BUS_TYPE_MANAGER, ConnManBusManagerIface))

struct _ConnManBusManager;
typedef struct _ConnManBusManager ConnManBusManager;
typedef struct _ConnManBusManagerIface ConnManBusManagerIface;

struct _ConnManBusManagerIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_connect_provider) (
    ConnManBusManager *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_provider);

  gboolean (*handle_create_session) (
    ConnManBusManager *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_settings,
    const gchar *arg_notifier);

  gboolean (*handle_destroy_session) (
    ConnManBusManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_session);

  gboolean (*handle_get_peers) (
    ConnManBusManager *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_get_properties) (
    ConnManBusManager *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_get_services) (
    ConnManBusManager *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_get_technologies) (
    ConnManBusManager *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_register_agent) (
    ConnManBusManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_path);

  gboolean (*handle_register_counter) (
    ConnManBusManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_path,
    guint arg_accuracy,
    guint arg_period);

  gboolean (*handle_register_peer_service) (
    ConnManBusManager *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_specification,
    gboolean arg_master);

  gboolean (*handle_release_private_network) (
    ConnManBusManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_path);

  gboolean (*handle_remove_provider) (
    ConnManBusManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_provider);

  gboolean (*handle_request_private_network) (
    ConnManBusManager *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_set_property) (
    ConnManBusManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_name,
    GVariant *arg_value);

  gboolean (*handle_unregister_agent) (
    ConnManBusManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_path);

  gboolean (*handle_unregister_counter) (
    ConnManBusManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_path);

  gboolean (*handle_unregister_peer_service) (
    ConnManBusManager *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_specification);

  void (*peers_changed) (
    ConnManBusManager *object,
    GVariant *arg_changed,
    const gchar *const *arg_removed);

  void (*property_changed) (
    ConnManBusManager *object,
    const gchar *arg_name,
    GVariant *arg_value);

  void (*services_changed) (
    ConnManBusManager *object,
    GVariant *arg_changed,
    const gchar *const *arg_removed);

  void (*technology_added) (
    ConnManBusManager *object,
    const gchar *arg_path,
    GVariant *arg_properties);

  void (*technology_removed) (
    ConnManBusManager *object,
    const gchar *arg_path);

};

GType conn_man_bus_manager_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *conn_man_bus_manager_interface_info (void);
guint conn_man_bus_manager_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void conn_man_bus_manager_complete_get_properties (
    ConnManBusManager *object,
    GDBusMethodInvocation *invocation,
    GVariant *properties);

void conn_man_bus_manager_complete_set_property (
    ConnManBusManager *object,
    GDBusMethodInvocation *invocation);

void conn_man_bus_manager_complete_get_technologies (
    ConnManBusManager *object,
    GDBusMethodInvocation *invocation,
    GVariant *technologies);

G_GNUC_DEPRECATED void conn_man_bus_manager_complete_remove_provider (
    ConnManBusManager *object,
    GDBusMethodInvocation *invocation);

void conn_man_bus_manager_complete_get_services (
    ConnManBusManager *object,
    GDBusMethodInvocation *invocation,
    GVariant *services);

void conn_man_bus_manager_complete_get_peers (
    ConnManBusManager *object,
    GDBusMethodInvocation *invocation,
    GVariant *peers);

G_GNUC_DEPRECATED void conn_man_bus_manager_complete_connect_provider (
    ConnManBusManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *path);

void conn_man_bus_manager_complete_register_agent (
    ConnManBusManager *object,
    GDBusMethodInvocation *invocation);

void conn_man_bus_manager_complete_unregister_agent (
    ConnManBusManager *object,
    GDBusMethodInvocation *invocation);

void conn_man_bus_manager_complete_register_counter (
    ConnManBusManager *object,
    GDBusMethodInvocation *invocation);

void conn_man_bus_manager_complete_unregister_counter (
    ConnManBusManager *object,
    GDBusMethodInvocation *invocation);

void conn_man_bus_manager_complete_create_session (
    ConnManBusManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *session);

void conn_man_bus_manager_complete_destroy_session (
    ConnManBusManager *object,
    GDBusMethodInvocation *invocation);

void conn_man_bus_manager_complete_request_private_network (
    ConnManBusManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *path,
    GVariant *settings,
    GVariant *socket);

void conn_man_bus_manager_complete_release_private_network (
    ConnManBusManager *object,
    GDBusMethodInvocation *invocation);

void conn_man_bus_manager_complete_register_peer_service (
    ConnManBusManager *object,
    GDBusMethodInvocation *invocation);

void conn_man_bus_manager_complete_unregister_peer_service (
    ConnManBusManager *object,
    GDBusMethodInvocation *invocation);



/* D-Bus signal emissions functions: */
void conn_man_bus_manager_emit_property_changed (
    ConnManBusManager *object,
    const gchar *arg_name,
    GVariant *arg_value);

void conn_man_bus_manager_emit_technology_added (
    ConnManBusManager *object,
    const gchar *arg_path,
    GVariant *arg_properties);

void conn_man_bus_manager_emit_technology_removed (
    ConnManBusManager *object,
    const gchar *arg_path);

void conn_man_bus_manager_emit_services_changed (
    ConnManBusManager *object,
    GVariant *arg_changed,
    const gchar *const *arg_removed);

void conn_man_bus_manager_emit_peers_changed (
    ConnManBusManager *object,
    GVariant *arg_changed,
    const gchar *const *arg_removed);



/* D-Bus method calls: */
void conn_man_bus_manager_call_get_properties (
    ConnManBusManager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean conn_man_bus_manager_call_get_properties_finish (
    ConnManBusManager *proxy,
    GVariant **out_properties,
    GAsyncResult *res,
    GError **error);

gboolean conn_man_bus_manager_call_get_properties_sync (
    ConnManBusManager *proxy,
    GVariant **out_properties,
    GCancellable *cancellable,
    GError **error);

void conn_man_bus_manager_call_set_property (
    ConnManBusManager *proxy,
    const gchar *arg_name,
    GVariant *arg_value,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean conn_man_bus_manager_call_set_property_finish (
    ConnManBusManager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean conn_man_bus_manager_call_set_property_sync (
    ConnManBusManager *proxy,
    const gchar *arg_name,
    GVariant *arg_value,
    GCancellable *cancellable,
    GError **error);

void conn_man_bus_manager_call_get_technologies (
    ConnManBusManager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean conn_man_bus_manager_call_get_technologies_finish (
    ConnManBusManager *proxy,
    GVariant **out_technologies,
    GAsyncResult *res,
    GError **error);

gboolean conn_man_bus_manager_call_get_technologies_sync (
    ConnManBusManager *proxy,
    GVariant **out_technologies,
    GCancellable *cancellable,
    GError **error);

G_GNUC_DEPRECATED void conn_man_bus_manager_call_remove_provider (
    ConnManBusManager *proxy,
    const gchar *arg_provider,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

G_GNUC_DEPRECATED gboolean conn_man_bus_manager_call_remove_provider_finish (
    ConnManBusManager *proxy,
    GAsyncResult *res,
    GError **error);

G_GNUC_DEPRECATED gboolean conn_man_bus_manager_call_remove_provider_sync (
    ConnManBusManager *proxy,
    const gchar *arg_provider,
    GCancellable *cancellable,
    GError **error);

void conn_man_bus_manager_call_get_services (
    ConnManBusManager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean conn_man_bus_manager_call_get_services_finish (
    ConnManBusManager *proxy,
    GVariant **out_services,
    GAsyncResult *res,
    GError **error);

gboolean conn_man_bus_manager_call_get_services_sync (
    ConnManBusManager *proxy,
    GVariant **out_services,
    GCancellable *cancellable,
    GError **error);

void conn_man_bus_manager_call_get_peers (
    ConnManBusManager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean conn_man_bus_manager_call_get_peers_finish (
    ConnManBusManager *proxy,
    GVariant **out_peers,
    GAsyncResult *res,
    GError **error);

gboolean conn_man_bus_manager_call_get_peers_sync (
    ConnManBusManager *proxy,
    GVariant **out_peers,
    GCancellable *cancellable,
    GError **error);

G_GNUC_DEPRECATED void conn_man_bus_manager_call_connect_provider (
    ConnManBusManager *proxy,
    GVariant *arg_provider,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

G_GNUC_DEPRECATED gboolean conn_man_bus_manager_call_connect_provider_finish (
    ConnManBusManager *proxy,
    gchar **out_path,
    GAsyncResult *res,
    GError **error);

G_GNUC_DEPRECATED gboolean conn_man_bus_manager_call_connect_provider_sync (
    ConnManBusManager *proxy,
    GVariant *arg_provider,
    gchar **out_path,
    GCancellable *cancellable,
    GError **error);

void conn_man_bus_manager_call_register_agent (
    ConnManBusManager *proxy,
    const gchar *arg_path,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean conn_man_bus_manager_call_register_agent_finish (
    ConnManBusManager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean conn_man_bus_manager_call_register_agent_sync (
    ConnManBusManager *proxy,
    const gchar *arg_path,
    GCancellable *cancellable,
    GError **error);

void conn_man_bus_manager_call_unregister_agent (
    ConnManBusManager *proxy,
    const gchar *arg_path,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean conn_man_bus_manager_call_unregister_agent_finish (
    ConnManBusManager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean conn_man_bus_manager_call_unregister_agent_sync (
    ConnManBusManager *proxy,
    const gchar *arg_path,
    GCancellable *cancellable,
    GError **error);

void conn_man_bus_manager_call_register_counter (
    ConnManBusManager *proxy,
    const gchar *arg_path,
    guint arg_accuracy,
    guint arg_period,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean conn_man_bus_manager_call_register_counter_finish (
    ConnManBusManager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean conn_man_bus_manager_call_register_counter_sync (
    ConnManBusManager *proxy,
    const gchar *arg_path,
    guint arg_accuracy,
    guint arg_period,
    GCancellable *cancellable,
    GError **error);

void conn_man_bus_manager_call_unregister_counter (
    ConnManBusManager *proxy,
    const gchar *arg_path,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean conn_man_bus_manager_call_unregister_counter_finish (
    ConnManBusManager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean conn_man_bus_manager_call_unregister_counter_sync (
    ConnManBusManager *proxy,
    const gchar *arg_path,
    GCancellable *cancellable,
    GError **error);

void conn_man_bus_manager_call_create_session (
    ConnManBusManager *proxy,
    GVariant *arg_settings,
    const gchar *arg_notifier,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean conn_man_bus_manager_call_create_session_finish (
    ConnManBusManager *proxy,
    gchar **out_session,
    GAsyncResult *res,
    GError **error);

gboolean conn_man_bus_manager_call_create_session_sync (
    ConnManBusManager *proxy,
    GVariant *arg_settings,
    const gchar *arg_notifier,
    gchar **out_session,
    GCancellable *cancellable,
    GError **error);

void conn_man_bus_manager_call_destroy_session (
    ConnManBusManager *proxy,
    const gchar *arg_session,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean conn_man_bus_manager_call_destroy_session_finish (
    ConnManBusManager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean conn_man_bus_manager_call_destroy_session_sync (
    ConnManBusManager *proxy,
    const gchar *arg_session,
    GCancellable *cancellable,
    GError **error);

void conn_man_bus_manager_call_request_private_network (
    ConnManBusManager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean conn_man_bus_manager_call_request_private_network_finish (
    ConnManBusManager *proxy,
    gchar **out_path,
    GVariant **out_settings,
    GVariant **out_socket,
    GAsyncResult *res,
    GError **error);

gboolean conn_man_bus_manager_call_request_private_network_sync (
    ConnManBusManager *proxy,
    gchar **out_path,
    GVariant **out_settings,
    GVariant **out_socket,
    GCancellable *cancellable,
    GError **error);

void conn_man_bus_manager_call_release_private_network (
    ConnManBusManager *proxy,
    const gchar *arg_path,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean conn_man_bus_manager_call_release_private_network_finish (
    ConnManBusManager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean conn_man_bus_manager_call_release_private_network_sync (
    ConnManBusManager *proxy,
    const gchar *arg_path,
    GCancellable *cancellable,
    GError **error);

void conn_man_bus_manager_call_register_peer_service (
    ConnManBusManager *proxy,
    GVariant *arg_specification,
    gboolean arg_master,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean conn_man_bus_manager_call_register_peer_service_finish (
    ConnManBusManager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean conn_man_bus_manager_call_register_peer_service_sync (
    ConnManBusManager *proxy,
    GVariant *arg_specification,
    gboolean arg_master,
    GCancellable *cancellable,
    GError **error);

void conn_man_bus_manager_call_unregister_peer_service (
    ConnManBusManager *proxy,
    GVariant *arg_specification,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean conn_man_bus_manager_call_unregister_peer_service_finish (
    ConnManBusManager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean conn_man_bus_manager_call_unregister_peer_service_sync (
    ConnManBusManager *proxy,
    GVariant *arg_specification,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define CONN_MAN_BUS_TYPE_MANAGER_PROXY (conn_man_bus_manager_proxy_get_type ())
#define CONN_MAN_BUS_MANAGER_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), CONN_MAN_BUS_TYPE_MANAGER_PROXY, ConnManBusManagerProxy))
#define CONN_MAN_BUS_MANAGER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), CONN_MAN_BUS_TYPE_MANAGER_PROXY, ConnManBusManagerProxyClass))
#define CONN_MAN_BUS_MANAGER_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), CONN_MAN_BUS_TYPE_MANAGER_PROXY, ConnManBusManagerProxyClass))
#define CONN_MAN_BUS_IS_MANAGER_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), CONN_MAN_BUS_TYPE_MANAGER_PROXY))
#define CONN_MAN_BUS_IS_MANAGER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), CONN_MAN_BUS_TYPE_MANAGER_PROXY))

typedef struct _ConnManBusManagerProxy ConnManBusManagerProxy;
typedef struct _ConnManBusManagerProxyClass ConnManBusManagerProxyClass;
typedef struct _ConnManBusManagerProxyPrivate ConnManBusManagerProxyPrivate;

struct _ConnManBusManagerProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  ConnManBusManagerProxyPrivate *priv;
};

struct _ConnManBusManagerProxyClass
{
  GDBusProxyClass parent_class;
};

GType conn_man_bus_manager_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ConnManBusManagerProxy, g_object_unref)
#endif

void conn_man_bus_manager_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
ConnManBusManager *conn_man_bus_manager_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
ConnManBusManager *conn_man_bus_manager_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void conn_man_bus_manager_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
ConnManBusManager *conn_man_bus_manager_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
ConnManBusManager *conn_man_bus_manager_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define CONN_MAN_BUS_TYPE_MANAGER_SKELETON (conn_man_bus_manager_skeleton_get_type ())
#define CONN_MAN_BUS_MANAGER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), CONN_MAN_BUS_TYPE_MANAGER_SKELETON, ConnManBusManagerSkeleton))
#define CONN_MAN_BUS_MANAGER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), CONN_MAN_BUS_TYPE_MANAGER_SKELETON, ConnManBusManagerSkeletonClass))
#define CONN_MAN_BUS_MANAGER_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), CONN_MAN_BUS_TYPE_MANAGER_SKELETON, ConnManBusManagerSkeletonClass))
#define CONN_MAN_BUS_IS_MANAGER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), CONN_MAN_BUS_TYPE_MANAGER_SKELETON))
#define CONN_MAN_BUS_IS_MANAGER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), CONN_MAN_BUS_TYPE_MANAGER_SKELETON))

typedef struct _ConnManBusManagerSkeleton ConnManBusManagerSkeleton;
typedef struct _ConnManBusManagerSkeletonClass ConnManBusManagerSkeletonClass;
typedef struct _ConnManBusManagerSkeletonPrivate ConnManBusManagerSkeletonPrivate;

struct _ConnManBusManagerSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  ConnManBusManagerSkeletonPrivate *priv;
};

struct _ConnManBusManagerSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType conn_man_bus_manager_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ConnManBusManagerSkeleton, g_object_unref)
#endif

ConnManBusManager *conn_man_bus_manager_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for net.connman.Clock */

#define CONN_MAN_BUS_TYPE_CLOCK (conn_man_bus_clock_get_type ())
#define CONN_MAN_BUS_CLOCK(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), CONN_MAN_BUS_TYPE_CLOCK, ConnManBusClock))
#define CONN_MAN_BUS_IS_CLOCK(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), CONN_MAN_BUS_TYPE_CLOCK))
#define CONN_MAN_BUS_CLOCK_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), CONN_MAN_BUS_TYPE_CLOCK, ConnManBusClockIface))

struct _ConnManBusClock;
typedef struct _ConnManBusClock ConnManBusClock;
typedef struct _ConnManBusClockIface ConnManBusClockIface;

struct _ConnManBusClockIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_get_properties) (
    ConnManBusClock *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_set_property) (
    ConnManBusClock *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_name,
    GVariant *arg_value);

  void (*property_changed) (
    ConnManBusClock *object,
    const gchar *arg_name,
    GVariant *arg_value);

};

GType conn_man_bus_clock_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *conn_man_bus_clock_interface_info (void);
guint conn_man_bus_clock_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void conn_man_bus_clock_complete_get_properties (
    ConnManBusClock *object,
    GDBusMethodInvocation *invocation,
    GVariant *properties);

void conn_man_bus_clock_complete_set_property (
    ConnManBusClock *object,
    GDBusMethodInvocation *invocation);



/* D-Bus signal emissions functions: */
void conn_man_bus_clock_emit_property_changed (
    ConnManBusClock *object,
    const gchar *arg_name,
    GVariant *arg_value);



/* D-Bus method calls: */
void conn_man_bus_clock_call_get_properties (
    ConnManBusClock *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean conn_man_bus_clock_call_get_properties_finish (
    ConnManBusClock *proxy,
    GVariant **out_properties,
    GAsyncResult *res,
    GError **error);

gboolean conn_man_bus_clock_call_get_properties_sync (
    ConnManBusClock *proxy,
    GVariant **out_properties,
    GCancellable *cancellable,
    GError **error);

void conn_man_bus_clock_call_set_property (
    ConnManBusClock *proxy,
    const gchar *arg_name,
    GVariant *arg_value,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean conn_man_bus_clock_call_set_property_finish (
    ConnManBusClock *proxy,
    GAsyncResult *res,
    GError **error);

gboolean conn_man_bus_clock_call_set_property_sync (
    ConnManBusClock *proxy,
    const gchar *arg_name,
    GVariant *arg_value,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define CONN_MAN_BUS_TYPE_CLOCK_PROXY (conn_man_bus_clock_proxy_get_type ())
#define CONN_MAN_BUS_CLOCK_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), CONN_MAN_BUS_TYPE_CLOCK_PROXY, ConnManBusClockProxy))
#define CONN_MAN_BUS_CLOCK_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), CONN_MAN_BUS_TYPE_CLOCK_PROXY, ConnManBusClockProxyClass))
#define CONN_MAN_BUS_CLOCK_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), CONN_MAN_BUS_TYPE_CLOCK_PROXY, ConnManBusClockProxyClass))
#define CONN_MAN_BUS_IS_CLOCK_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), CONN_MAN_BUS_TYPE_CLOCK_PROXY))
#define CONN_MAN_BUS_IS_CLOCK_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), CONN_MAN_BUS_TYPE_CLOCK_PROXY))

typedef struct _ConnManBusClockProxy ConnManBusClockProxy;
typedef struct _ConnManBusClockProxyClass ConnManBusClockProxyClass;
typedef struct _ConnManBusClockProxyPrivate ConnManBusClockProxyPrivate;

struct _ConnManBusClockProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  ConnManBusClockProxyPrivate *priv;
};

struct _ConnManBusClockProxyClass
{
  GDBusProxyClass parent_class;
};

GType conn_man_bus_clock_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ConnManBusClockProxy, g_object_unref)
#endif

void conn_man_bus_clock_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
ConnManBusClock *conn_man_bus_clock_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
ConnManBusClock *conn_man_bus_clock_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void conn_man_bus_clock_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
ConnManBusClock *conn_man_bus_clock_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
ConnManBusClock *conn_man_bus_clock_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define CONN_MAN_BUS_TYPE_CLOCK_SKELETON (conn_man_bus_clock_skeleton_get_type ())
#define CONN_MAN_BUS_CLOCK_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), CONN_MAN_BUS_TYPE_CLOCK_SKELETON, ConnManBusClockSkeleton))
#define CONN_MAN_BUS_CLOCK_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), CONN_MAN_BUS_TYPE_CLOCK_SKELETON, ConnManBusClockSkeletonClass))
#define CONN_MAN_BUS_CLOCK_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), CONN_MAN_BUS_TYPE_CLOCK_SKELETON, ConnManBusClockSkeletonClass))
#define CONN_MAN_BUS_IS_CLOCK_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), CONN_MAN_BUS_TYPE_CLOCK_SKELETON))
#define CONN_MAN_BUS_IS_CLOCK_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), CONN_MAN_BUS_TYPE_CLOCK_SKELETON))

typedef struct _ConnManBusClockSkeleton ConnManBusClockSkeleton;
typedef struct _ConnManBusClockSkeletonClass ConnManBusClockSkeletonClass;
typedef struct _ConnManBusClockSkeletonPrivate ConnManBusClockSkeletonPrivate;

struct _ConnManBusClockSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  ConnManBusClockSkeletonPrivate *priv;
};

struct _ConnManBusClockSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType conn_man_bus_clock_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ConnManBusClockSkeleton, g_object_unref)
#endif

ConnManBusClock *conn_man_bus_clock_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for net.connman.Technology */

#define CONN_MAN_BUS_TYPE_TECHNOLOGY (conn_man_bus_technology_get_type ())
#define CONN_MAN_BUS_TECHNOLOGY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), CONN_MAN_BUS_TYPE_TECHNOLOGY, ConnManBusTechnology))
#define CONN_MAN_BUS_IS_TECHNOLOGY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), CONN_MAN_BUS_TYPE_TECHNOLOGY))
#define CONN_MAN_BUS_TECHNOLOGY_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), CONN_MAN_BUS_TYPE_TECHNOLOGY, ConnManBusTechnologyIface))

struct _ConnManBusTechnology;
typedef struct _ConnManBusTechnology ConnManBusTechnology;
typedef struct _ConnManBusTechnologyIface ConnManBusTechnologyIface;

struct _ConnManBusTechnologyIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_get_properties) (
    ConnManBusTechnology *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_scan) (
    ConnManBusTechnology *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_set_property) (
    ConnManBusTechnology *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_name,
    GVariant *arg_value);

  void (*property_changed) (
    ConnManBusTechnology *object,
    const gchar *arg_name,
    GVariant *arg_value);

};

GType conn_man_bus_technology_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *conn_man_bus_technology_interface_info (void);
guint conn_man_bus_technology_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
G_GNUC_DEPRECATED void conn_man_bus_technology_complete_get_properties (
    ConnManBusTechnology *object,
    GDBusMethodInvocation *invocation,
    GVariant *properties);

void conn_man_bus_technology_complete_set_property (
    ConnManBusTechnology *object,
    GDBusMethodInvocation *invocation);

void conn_man_bus_technology_complete_scan (
    ConnManBusTechnology *object,
    GDBusMethodInvocation *invocation);



/* D-Bus signal emissions functions: */
void conn_man_bus_technology_emit_property_changed (
    ConnManBusTechnology *object,
    const gchar *arg_name,
    GVariant *arg_value);



/* D-Bus method calls: */
G_GNUC_DEPRECATED void conn_man_bus_technology_call_get_properties (
    ConnManBusTechnology *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

G_GNUC_DEPRECATED gboolean conn_man_bus_technology_call_get_properties_finish (
    ConnManBusTechnology *proxy,
    GVariant **out_properties,
    GAsyncResult *res,
    GError **error);

/* !!! removed deprecated warning !!!
 * Since we control our entire environment, as long as 
 * we don't change Connman, this will work. - PRA
 */
gboolean conn_man_bus_technology_call_get_properties_sync (
    ConnManBusTechnology *proxy,
    GVariant **out_properties,
    GCancellable *cancellable,
    GError **error);

void conn_man_bus_technology_call_set_property (
    ConnManBusTechnology *proxy,
    const gchar *arg_name,
    GVariant *arg_value,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean conn_man_bus_technology_call_set_property_finish (
    ConnManBusTechnology *proxy,
    GAsyncResult *res,
    GError **error);

gboolean conn_man_bus_technology_call_set_property_sync (
    ConnManBusTechnology *proxy,
    const gchar *arg_name,
    GVariant *arg_value,
    GCancellable *cancellable,
    GError **error);

void conn_man_bus_technology_call_scan (
    ConnManBusTechnology *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean conn_man_bus_technology_call_scan_finish (
    ConnManBusTechnology *proxy,
    GAsyncResult *res,
    GError **error);

gboolean conn_man_bus_technology_call_scan_sync (
    ConnManBusTechnology *proxy,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define CONN_MAN_BUS_TYPE_TECHNOLOGY_PROXY (conn_man_bus_technology_proxy_get_type ())
#define CONN_MAN_BUS_TECHNOLOGY_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), CONN_MAN_BUS_TYPE_TECHNOLOGY_PROXY, ConnManBusTechnologyProxy))
#define CONN_MAN_BUS_TECHNOLOGY_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), CONN_MAN_BUS_TYPE_TECHNOLOGY_PROXY, ConnManBusTechnologyProxyClass))
#define CONN_MAN_BUS_TECHNOLOGY_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), CONN_MAN_BUS_TYPE_TECHNOLOGY_PROXY, ConnManBusTechnologyProxyClass))
#define CONN_MAN_BUS_IS_TECHNOLOGY_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), CONN_MAN_BUS_TYPE_TECHNOLOGY_PROXY))
#define CONN_MAN_BUS_IS_TECHNOLOGY_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), CONN_MAN_BUS_TYPE_TECHNOLOGY_PROXY))

typedef struct _ConnManBusTechnologyProxy ConnManBusTechnologyProxy;
typedef struct _ConnManBusTechnologyProxyClass ConnManBusTechnologyProxyClass;
typedef struct _ConnManBusTechnologyProxyPrivate ConnManBusTechnologyProxyPrivate;

struct _ConnManBusTechnologyProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  ConnManBusTechnologyProxyPrivate *priv;
};

struct _ConnManBusTechnologyProxyClass
{
  GDBusProxyClass parent_class;
};

GType conn_man_bus_technology_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ConnManBusTechnologyProxy, g_object_unref)
#endif

void conn_man_bus_technology_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
ConnManBusTechnology *conn_man_bus_technology_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
ConnManBusTechnology *conn_man_bus_technology_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void conn_man_bus_technology_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
ConnManBusTechnology *conn_man_bus_technology_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
ConnManBusTechnology *conn_man_bus_technology_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define CONN_MAN_BUS_TYPE_TECHNOLOGY_SKELETON (conn_man_bus_technology_skeleton_get_type ())
#define CONN_MAN_BUS_TECHNOLOGY_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), CONN_MAN_BUS_TYPE_TECHNOLOGY_SKELETON, ConnManBusTechnologySkeleton))
#define CONN_MAN_BUS_TECHNOLOGY_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), CONN_MAN_BUS_TYPE_TECHNOLOGY_SKELETON, ConnManBusTechnologySkeletonClass))
#define CONN_MAN_BUS_TECHNOLOGY_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), CONN_MAN_BUS_TYPE_TECHNOLOGY_SKELETON, ConnManBusTechnologySkeletonClass))
#define CONN_MAN_BUS_IS_TECHNOLOGY_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), CONN_MAN_BUS_TYPE_TECHNOLOGY_SKELETON))
#define CONN_MAN_BUS_IS_TECHNOLOGY_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), CONN_MAN_BUS_TYPE_TECHNOLOGY_SKELETON))

typedef struct _ConnManBusTechnologySkeleton ConnManBusTechnologySkeleton;
typedef struct _ConnManBusTechnologySkeletonClass ConnManBusTechnologySkeletonClass;
typedef struct _ConnManBusTechnologySkeletonPrivate ConnManBusTechnologySkeletonPrivate;

struct _ConnManBusTechnologySkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  ConnManBusTechnologySkeletonPrivate *priv;
};

struct _ConnManBusTechnologySkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType conn_man_bus_technology_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ConnManBusTechnologySkeleton, g_object_unref)
#endif

ConnManBusTechnology *conn_man_bus_technology_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for net.connman.Service */

#define CONN_MAN_BUS_TYPE_SERVICE (conn_man_bus_service_get_type ())
#define CONN_MAN_BUS_SERVICE(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), CONN_MAN_BUS_TYPE_SERVICE, ConnManBusService))
#define CONN_MAN_BUS_IS_SERVICE(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), CONN_MAN_BUS_TYPE_SERVICE))
#define CONN_MAN_BUS_SERVICE_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), CONN_MAN_BUS_TYPE_SERVICE, ConnManBusServiceIface))

struct _ConnManBusService;
typedef struct _ConnManBusService ConnManBusService;
typedef struct _ConnManBusServiceIface ConnManBusServiceIface;

struct _ConnManBusServiceIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_clear_property) (
    ConnManBusService *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_name);

  gboolean (*handle_connect) (
    ConnManBusService *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_disconnect) (
    ConnManBusService *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_get_properties) (
    ConnManBusService *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_move_after) (
    ConnManBusService *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_service);

  gboolean (*handle_move_before) (
    ConnManBusService *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_service);

  gboolean (*handle_remove) (
    ConnManBusService *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_reset_counters) (
    ConnManBusService *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_set_property) (
    ConnManBusService *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_name,
    GVariant *arg_value);

  void (*property_changed) (
    ConnManBusService *object,
    const gchar *arg_name,
    GVariant *arg_value);

};

GType conn_man_bus_service_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *conn_man_bus_service_interface_info (void);
guint conn_man_bus_service_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
G_GNUC_DEPRECATED void conn_man_bus_service_complete_get_properties (
    ConnManBusService *object,
    GDBusMethodInvocation *invocation,
    GVariant *properties);

void conn_man_bus_service_complete_set_property (
    ConnManBusService *object,
    GDBusMethodInvocation *invocation);

void conn_man_bus_service_complete_clear_property (
    ConnManBusService *object,
    GDBusMethodInvocation *invocation);

void conn_man_bus_service_complete_connect (
    ConnManBusService *object,
    GDBusMethodInvocation *invocation);

void conn_man_bus_service_complete_disconnect (
    ConnManBusService *object,
    GDBusMethodInvocation *invocation);

void conn_man_bus_service_complete_remove (
    ConnManBusService *object,
    GDBusMethodInvocation *invocation);

void conn_man_bus_service_complete_move_before (
    ConnManBusService *object,
    GDBusMethodInvocation *invocation);

void conn_man_bus_service_complete_move_after (
    ConnManBusService *object,
    GDBusMethodInvocation *invocation);

void conn_man_bus_service_complete_reset_counters (
    ConnManBusService *object,
    GDBusMethodInvocation *invocation);



/* D-Bus signal emissions functions: */
void conn_man_bus_service_emit_property_changed (
    ConnManBusService *object,
    const gchar *arg_name,
    GVariant *arg_value);



/* D-Bus method calls: */
G_GNUC_DEPRECATED void conn_man_bus_service_call_get_properties (
    ConnManBusService *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

G_GNUC_DEPRECATED gboolean conn_man_bus_service_call_get_properties_finish (
    ConnManBusService *proxy,
    GVariant **out_properties,
    GAsyncResult *res,
    GError **error);

G_GNUC_DEPRECATED gboolean conn_man_bus_service_call_get_properties_sync (
    ConnManBusService *proxy,
    GVariant **out_properties,
    GCancellable *cancellable,
    GError **error);

void conn_man_bus_service_call_set_property (
    ConnManBusService *proxy,
    const gchar *arg_name,
    GVariant *arg_value,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean conn_man_bus_service_call_set_property_finish (
    ConnManBusService *proxy,
    GAsyncResult *res,
    GError **error);

gboolean conn_man_bus_service_call_set_property_sync (
    ConnManBusService *proxy,
    const gchar *arg_name,
    GVariant *arg_value,
    GCancellable *cancellable,
    GError **error);

void conn_man_bus_service_call_clear_property (
    ConnManBusService *proxy,
    const gchar *arg_name,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean conn_man_bus_service_call_clear_property_finish (
    ConnManBusService *proxy,
    GAsyncResult *res,
    GError **error);

gboolean conn_man_bus_service_call_clear_property_sync (
    ConnManBusService *proxy,
    const gchar *arg_name,
    GCancellable *cancellable,
    GError **error);

void conn_man_bus_service_call_connect (
    ConnManBusService *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean conn_man_bus_service_call_connect_finish (
    ConnManBusService *proxy,
    GAsyncResult *res,
    GError **error);

gboolean conn_man_bus_service_call_connect_sync (
    ConnManBusService *proxy,
    GCancellable *cancellable,
    GError **error);

void conn_man_bus_service_call_disconnect (
    ConnManBusService *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean conn_man_bus_service_call_disconnect_finish (
    ConnManBusService *proxy,
    GAsyncResult *res,
    GError **error);

gboolean conn_man_bus_service_call_disconnect_sync (
    ConnManBusService *proxy,
    GCancellable *cancellable,
    GError **error);

void conn_man_bus_service_call_remove (
    ConnManBusService *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean conn_man_bus_service_call_remove_finish (
    ConnManBusService *proxy,
    GAsyncResult *res,
    GError **error);

gboolean conn_man_bus_service_call_remove_sync (
    ConnManBusService *proxy,
    GCancellable *cancellable,
    GError **error);

void conn_man_bus_service_call_move_before (
    ConnManBusService *proxy,
    const gchar *arg_service,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean conn_man_bus_service_call_move_before_finish (
    ConnManBusService *proxy,
    GAsyncResult *res,
    GError **error);

gboolean conn_man_bus_service_call_move_before_sync (
    ConnManBusService *proxy,
    const gchar *arg_service,
    GCancellable *cancellable,
    GError **error);

void conn_man_bus_service_call_move_after (
    ConnManBusService *proxy,
    const gchar *arg_service,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean conn_man_bus_service_call_move_after_finish (
    ConnManBusService *proxy,
    GAsyncResult *res,
    GError **error);

gboolean conn_man_bus_service_call_move_after_sync (
    ConnManBusService *proxy,
    const gchar *arg_service,
    GCancellable *cancellable,
    GError **error);

void conn_man_bus_service_call_reset_counters (
    ConnManBusService *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean conn_man_bus_service_call_reset_counters_finish (
    ConnManBusService *proxy,
    GAsyncResult *res,
    GError **error);

gboolean conn_man_bus_service_call_reset_counters_sync (
    ConnManBusService *proxy,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define CONN_MAN_BUS_TYPE_SERVICE_PROXY (conn_man_bus_service_proxy_get_type ())
#define CONN_MAN_BUS_SERVICE_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), CONN_MAN_BUS_TYPE_SERVICE_PROXY, ConnManBusServiceProxy))
#define CONN_MAN_BUS_SERVICE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), CONN_MAN_BUS_TYPE_SERVICE_PROXY, ConnManBusServiceProxyClass))
#define CONN_MAN_BUS_SERVICE_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), CONN_MAN_BUS_TYPE_SERVICE_PROXY, ConnManBusServiceProxyClass))
#define CONN_MAN_BUS_IS_SERVICE_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), CONN_MAN_BUS_TYPE_SERVICE_PROXY))
#define CONN_MAN_BUS_IS_SERVICE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), CONN_MAN_BUS_TYPE_SERVICE_PROXY))

typedef struct _ConnManBusServiceProxy ConnManBusServiceProxy;
typedef struct _ConnManBusServiceProxyClass ConnManBusServiceProxyClass;
typedef struct _ConnManBusServiceProxyPrivate ConnManBusServiceProxyPrivate;

struct _ConnManBusServiceProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  ConnManBusServiceProxyPrivate *priv;
};

struct _ConnManBusServiceProxyClass
{
  GDBusProxyClass parent_class;
};

GType conn_man_bus_service_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ConnManBusServiceProxy, g_object_unref)
#endif

void conn_man_bus_service_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
ConnManBusService *conn_man_bus_service_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
ConnManBusService *conn_man_bus_service_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void conn_man_bus_service_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
ConnManBusService *conn_man_bus_service_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
ConnManBusService *conn_man_bus_service_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define CONN_MAN_BUS_TYPE_SERVICE_SKELETON (conn_man_bus_service_skeleton_get_type ())
#define CONN_MAN_BUS_SERVICE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), CONN_MAN_BUS_TYPE_SERVICE_SKELETON, ConnManBusServiceSkeleton))
#define CONN_MAN_BUS_SERVICE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), CONN_MAN_BUS_TYPE_SERVICE_SKELETON, ConnManBusServiceSkeletonClass))
#define CONN_MAN_BUS_SERVICE_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), CONN_MAN_BUS_TYPE_SERVICE_SKELETON, ConnManBusServiceSkeletonClass))
#define CONN_MAN_BUS_IS_SERVICE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), CONN_MAN_BUS_TYPE_SERVICE_SKELETON))
#define CONN_MAN_BUS_IS_SERVICE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), CONN_MAN_BUS_TYPE_SERVICE_SKELETON))

typedef struct _ConnManBusServiceSkeleton ConnManBusServiceSkeleton;
typedef struct _ConnManBusServiceSkeletonClass ConnManBusServiceSkeletonClass;
typedef struct _ConnManBusServiceSkeletonPrivate ConnManBusServiceSkeletonPrivate;

struct _ConnManBusServiceSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  ConnManBusServiceSkeletonPrivate *priv;
};

struct _ConnManBusServiceSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType conn_man_bus_service_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ConnManBusServiceSkeleton, g_object_unref)
#endif

ConnManBusService *conn_man_bus_service_skeleton_new (void);


G_END_DECLS

#endif /* __CONNMANBUS_H__ */
